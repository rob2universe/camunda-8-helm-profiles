root ?= $(shell pwd)/../..

# Set these values to what you want for your specific environment
# If this is an existing AKS Cluster, set these values to point to your existing environment
# Otherwise, these values will be used to create a new Cluster
region ?= eastus
clusterName ?= MY_CLUSTER_NAME
resourceGroup ?= MY_CLUSTER_NAME-rg
gatewayName ?= MY_GATEWAY_NAME
# Specific the subdomain to use. This value will be used like so: MY_DOMAIN_NAME.cloudapp.azure.com
dnsLabel ?= MY_DOMAIN_NAME
machineType ?= Standard_A8_v2
minSize ?= 1
maxSize ?= 6

certEmail ?= YOUR_EMAIL@camunda.com
fqdn ?= ${dnsLabel}.${region}.cloudapp.azure.com
# fqdn = $(IP).nip.io

# These values are used by Helm. You shouldn't change these unless you are familiar with Helm
namespace ?= camunda
release ?= camunda
chart ?= camunda/camunda-platform

# This file will be generated by make targets
chartValues ?= camunda-values-agic-tls.yaml


.PHONY: all
all: cert-manager letsencrypt-prod camunda-values-agic-tls.yaml camunda annotate-ingress-tls external-urls

# 0 kube from cluster.mk: Create Kubernetes cluster. (No aplication gateway required)
.PHONY: kube
kube: kube-agic

# 1 cert-manager from cert-manager.mk: create certificate manager for tls

# 2 letsencrypt-staging/-prod from cert-manager.mk: create letsencrypt cert issuer

# 3 application gateway is already created, no need for ingress controller

# 4 create camunda-values-agic.yaml with external ip from ingress controller's Loadbalancer
.PHONY: camunda-values-agic-tls.yaml
camunda-values-agic-tls.yaml: ingress-ip-from-service
	@echo Ingress controller will use fqdn: $(fqdn)
	@sed "s/dnslabel.location.cloudapp.azure.com/$(fqdn)/g;" camunda-values.yaml > ./$(chartValues)

# 5 helm install camunda from camunda.mk with own tls config, combined ingress

# 6 annotate-ingress-tls from cert-manager.mk: add cluster-issuer annotation to ingress

# 7 Show external URLs
.PHONY: external-urls
external-urls: ingress-ip-from-service
	@echo https://$(fqdn)/auth
	@echo https://$(fqdn)/identity
	@echo https://$(fqdn)/operate
	@echo https://$(fqdn)/tasklist
	@echo https://$(fqdn)/optimize
	@echo $(fqdn):443

# 8 NOTE! agic is a Layer 7 load balancer. It can't support GRPC communication to zeebe-gateway
# So no GRPC is available when you use App Gateway

.PHONY: clean
clean: clean-camunda clean-ingress clean-cert-manager
	rm -f $(chartValues)

include $(root)/include/camunda.mk
include $(root)/include/ingress-nginx.mk
include $(root)/include/cert-manager.mk
include $(root)/azure/include/aks.mk
include $(root)/azure/include/fileshare.mk
# include $(root)/include/zbctl.mk
